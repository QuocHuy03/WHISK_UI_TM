import requests
import json
import pandas as pd
import uuid
import base64
import os
from datetime import datetime
from colorama import init, Fore, Style
from tqdm import tqdm
import threading
import time
import sys
import random
import string
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

# Kh·ªüi t·∫°o colorama
init(autoreset=True)

# ===== BROWSER SIMULATION SETTINGS =====
class BrowserSimulator:
    """L·ªõp gi·∫£ l·∫≠p tr√¨nh duy·ªát th·∫≠t"""
    
    def __init__(self):
        self.user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/120.0.0.0 Safari/537.36"
        ]
        self.session = requests.Session()
        self._setup_session()
    
    def _setup_session(self):
        """Thi·∫øt l·∫≠p session v·ªõi retry strategy"""
        retry_strategy = Retry(
            total=3,
            backoff_factor=1,
            status_forcelist=[429, 500, 502, 503, 504],
        )
        adapter = HTTPAdapter(max_retries=retry_strategy)
        self.session.mount("http://", adapter)
        self.session.mount("https://", adapter)
    
    def get_random_user_agent(self):
        """L·∫•y User-Agent ng·∫´u nhi√™n"""
        return random.choice(self.user_agents)
    
    def get_browser_headers(self):
        """T·∫°o headers gi·∫£ l·∫≠p tr√¨nh duy·ªát th·∫≠t"""
        user_agent = self.get_random_user_agent()
        
        headers = {
            "User-Agent": user_agent,
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
            "Accept-Language": "en-US,en;q=0.9,vi;q=0.8",
            "Accept-Encoding": "gzip, deflate, br",
            "DNT": "1",
            "Connection": "keep-alive",
            "Upgrade-Insecure-Requests": "1",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "none",
            "Sec-Fetch-User": "?1",
            "Cache-Control": "max-age=0",
            "sec-ch-ua": '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": '"Windows"'
        }
        return headers
    
    def get_api_headers(self, access_token=None, cookie=None):
        """T·∫°o headers cho API requests"""
        headers = self.get_browser_headers()
        headers.update({
            "Content-Type": "application/json",
            "X-Requested-With": "XMLHttpRequest",
            "Origin": "https://labs.google",
            "Referer": "https://labs.google/"
        })
        
        if access_token:
            headers["Authorization"] = f"Bearer {access_token}"
        if cookie:
            headers["Cookie"] = cookie
            
        return headers
    
    def generate_fingerprint(self):
        """T·∫°o fingerprint gi·∫£ l·∫≠p"""
        fingerprint = {
            "screen_resolution": random.choice(["1920x1080", "1366x768", "1440x900", "1536x864"]),
            "timezone": random.choice(["Asia/Ho_Chi_Minh", "Asia/Bangkok", "Asia/Jakarta"]),
            "language": "en-US",
            "platform": "Win32",
            "hardware_concurrency": random.choice([4, 8, 12, 16]),
            "device_memory": random.choice([4, 8, 16, 32])
        }
        return fingerprint
    
    def random_delay(self, min_delay=1, max_delay=3):
        """Delay ng·∫´u nhi√™n gi·ªØa c√°c request"""
        delay = random.uniform(min_delay, max_delay)
        time.sleep(delay)
        return delay
    
    def make_request(self, method, url, **kwargs):
        """Th·ª±c hi·ªán request v·ªõi gi·∫£ l·∫≠p tr√¨nh duy·ªát"""
        # Th√™m headers gi·∫£ l·∫≠p
        if 'headers' not in kwargs:
            kwargs['headers'] = {}
        
        # Merge v·ªõi headers gi·∫£ l·∫≠p
        browser_headers = self.get_browser_headers()
        kwargs['headers'].update(browser_headers)
        
        # Random delay tr∆∞·ªõc request
        delay = self.random_delay()
        
        try:
            response = self.session.request(method, url, **kwargs)
            return response
        except Exception as e:
            log_error(f"Request failed: {e}")
            return None

# Kh·ªüi t·∫°o browser simulator
browser_sim = BrowserSimulator()

def activate_browser_simulation():
    """K√≠ch ho·∫°t c√°c th√¥ng s·ªë gi·∫£ l·∫≠p tr√¨nh duy·ªát th·∫≠t"""
    print("‚úì ƒê√£ k√≠ch ho·∫°t c√°c th√¥ng s·ªë gi·∫£ l·∫≠p tr√¨nh duy·ªát th·∫≠t:")
    print("  - User-Agent ng·∫´u nhi√™n")
    print("  - Headers gi·∫£ l·∫≠p tr√¨nh duy·ªát")
    print("  - Fingerprint gi·∫£ l·∫≠p")
    print("  - Delay ng·∫´u nhi√™n gi·ªØa c√°c request")
    print("  - Session gi·∫£ l·∫≠p")
    print("  - Retry strategy cho request")
    print("  - Connection pooling")

def log_info(message):
    """Log th√¥ng tin v·ªõi th·ªùi gian v√† m√†u xanh"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"{Fore.CYAN}[{timestamp}] {Fore.GREEN}[INFO]{Style.RESET_ALL} {message}")

def log_success(message):
    """Log th√†nh c√¥ng v·ªõi th·ªùi gian v√† m√†u xanh l√°"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"{Fore.CYAN}[{timestamp}] {Fore.GREEN}[SUCCESS]{Style.RESET_ALL} {message}")

def log_error(message):
    """Log l·ªói v·ªõi th·ªùi gian v√† m√†u ƒë·ªè"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"{Fore.CYAN}[{timestamp}] {Fore.RED}[ERROR]{Style.RESET_ALL} {message}")

def log_warning(message):
    """Log c·∫£nh b√°o v·ªõi th·ªùi gian v√† m√†u v√†ng"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"{Fore.CYAN}[{timestamp}] {Fore.YELLOW}[WARNING]{Style.RESET_ALL} {message}")

def log_user_info(name, email):
    """Log th√¥ng tin user v·ªõi m√†u ƒë·∫∑c bi·ªát"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"{Fore.CYAN}[{timestamp}] {Fore.MAGENTA}[USER]{Style.RESET_ALL} {Fore.BLUE}{name}{Style.RESET_ALL} <{Fore.CYAN}{email}{Style.RESET_ALL}>")

class LoadingSpinner:
    """Loading spinner v·ªõi animation"""
    def __init__(self, message="Loading...", color=Fore.YELLOW):
        self.message = message
        self.color = color
        self.spinner_chars = ['‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è']
        self.running = False
        self.thread = None
    
    def start(self):
        """B·∫Øt ƒë·∫ßu spinner"""
        self.running = True
        self.thread = threading.Thread(target=self._spin)
        self.thread.daemon = True
        self.thread.start()
    
    def stop(self):
        """D·ª´ng spinner"""
        self.running = False
        if self.thread:
            self.thread.join()
        # X√≥a d√≤ng hi·ªán t·∫°i
        sys.stdout.write('\r' + ' ' * (len(self.message) + 10) + '\r')
        sys.stdout.flush()
    
    def _spin(self):
        """Animation loop"""
        i = 0
        while self.running:
            sys.stdout.write(f'\r{self.color}{self.spinner_chars[i % len(self.spinner_chars)]}{Style.RESET_ALL} {self.message}')
            sys.stdout.flush()
            time.sleep(0.1)
            i += 1

def show_loading(message, duration=2):
    """Hi·ªÉn th·ªã loading v·ªõi th·ªùi gian c·ªë ƒë·ªãnh"""
    spinner = LoadingSpinner(message, Fore.CYAN)
    spinner.start()
    time.sleep(duration)
    spinner.stop()

def get_output_folder():
    """L·∫•y folder output t·ª´ user input"""
    print(f"\n{Fore.YELLOW}üìÅ Ch·ªçn folder ƒë·ªÉ l∆∞u ·∫£nh:{Style.RESET_ALL}")
    print(f"{Fore.CYAN}1.{Style.RESET_ALL} S·ª≠ d·ª•ng folder hi·ªán t·∫°i (./)")
    print(f"{Fore.CYAN}2.{Style.RESET_ALL} T·∫°o folder m·ªõi")
    print(f"{Fore.CYAN}3.{Style.RESET_ALL} Nh·∫≠p ƒë∆∞·ªùng d·∫´n folder")
    
    while True:
        choice = input(f"\n{Fore.GREEN}Ch·ªçn (1/2/3): {Style.RESET_ALL}").strip()
        
        if choice == "1":
            return "./"
        elif choice == "2":
            folder_name = input(f"{Fore.GREEN}Nh·∫≠p t√™n folder m·ªõi: {Style.RESET_ALL}").strip()
            if not folder_name:
                folder_name = f"images_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            return folder_name
        elif choice == "3":
            folder_path = input(f"{Fore.GREEN}Nh·∫≠p ƒë∆∞·ªùng d·∫´n folder: {Style.RESET_ALL}").strip()
            return folder_path
        else:
            print(f"{Fore.RED}L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn 1, 2 ho·∫∑c 3.{Style.RESET_ALL}")

def create_folder_if_not_exists(folder_path):
    """T·∫°o folder n·∫øu ch∆∞a t·ªìn t·∫°i"""
    if not os.path.exists(folder_path):
        try:
            os.makedirs(folder_path, exist_ok=True)
            log_success(f"ƒê√£ t·∫°o folder: {folder_path}")
            return True
        except Exception as e:
            log_error(f"Kh√¥ng th·ªÉ t·∫°o folder {folder_path}: {e}")
            return False
    else:
        log_info(f"Folder ƒë√£ t·ªìn t·∫°i: {folder_path}")
        return True

def read_cookie():
    """ƒê·ªçc cookie t·ª´ file cookie.txt"""
    with open('cookie.txt', 'r', encoding='utf-8') as f:
        return f.read().strip()

def get_access_token(cookie):
    """L·∫•y access_token t·ª´ Google Labs API"""
    url = "https://labs.google/fx/api/auth/session"
    headers = browser_sim.get_api_headers(cookie=cookie)
    
    # Hi·ªÉn th·ªã loading spinner
    spinner = LoadingSpinner("ƒêang x√°c th·ª±c v·ªõi Google Labs...", Fore.CYAN)
    spinner.start()
    
    try:
        response = browser_sim.make_request("GET", url, headers=headers, timeout=30)
        spinner.stop()
        
        if response and response.status_code == 200:
            return response.json()
        else:
            if response:
                log_error(f"L·ªói khi l·∫•y access_token: {response.status_code}")
                log_error(response.text)
            return None
    except requests.exceptions.Timeout:
        spinner.stop()
        log_error("Timeout khi k·∫øt n·ªëi ƒë·∫øn Google Labs")
        return None
    except Exception as e:
        spinner.stop()
        log_error(f"L·ªói k·∫øt n·ªëi: {e}")
        return None

def read_excel_data():
    """ƒê·ªçc d·ªØ li·ªáu t·ª´ file Excel (STT, PROMPT)"""
    # Hi·ªÉn th·ªã loading spinner
    spinner = LoadingSpinner("ƒêang ƒë·ªçc file Excel...", Fore.GREEN)
    spinner.start()
    
    try:
        df = pd.read_excel('prompt_image.xlsx')
        # L·∫•y c·ªôt A (STT) v√† c·ªôt B (PROMPT)
        stt_list = df.iloc[:, 0].tolist()  # C·ªôt A
        prompt_list = df.iloc[:, 1].tolist()  # C·ªôt B
        
        spinner.stop()
        return list(zip(stt_list, prompt_list))
    except Exception as e:
        spinner.stop()
        log_error(f"L·ªói khi ƒë·ªçc file Excel: {e}")
        return []

def read_excel_img2img_data():
    """ƒê·ªçc d·ªØ li·ªáu t·ª´ file Excel cho Image-to-Image (STT, PROMPT, IMAGE_PATH)"""
    # Hi·ªÉn th·ªã loading spinner
    spinner = LoadingSpinner("ƒêang ƒë·ªçc file Excel cho Image-to-Image...", Fore.GREEN)
    spinner.start()
    
    try:
        df = pd.read_excel('prompt_image.xlsx')
        # L·∫•y c·ªôt A (STT), c·ªôt B (PROMPT), c·ªôt C (IMAGE_PATH)
        stt_list = df.iloc[:, 0].tolist()  # C·ªôt A
        prompt_list = df.iloc[:, 1].tolist()  # C·ªôt B
        image_path_list = df.iloc[:, 2].tolist()  # C·ªôt C
        
        spinner.stop()
        return list(zip(stt_list, prompt_list, image_path_list))
    except Exception as e:
        spinner.stop()
        log_error(f"L·ªói khi ƒë·ªçc file Excel: {e}")
        return []

def generate_image(access_token, prompt, seed):
    """G·ªçi API ƒë·ªÉ t·∫°o ·∫£nh"""
    url = "https://aisandbox-pa.googleapis.com/v1/whisk:generateImage"
    
    headers = browser_sim.get_api_headers(access_token=access_token)
    
    # T·∫°o UUID ng·∫´u nhi√™n cho workflowId
    workflow_id = str(uuid.uuid4())
    
    payload = {
        "clientContext": {
            "workflowId": workflow_id,
            "tool": "BACKBONE",
            "sessionId": f";{uuid.uuid4().int}"
        },
        "imageModelSettings": {
            "imageModel": image_model,
            "aspectRatio": "IMAGE_ASPECT_RATIO_LANDSCAPE"
        },
        "seed": seed,
        "prompt": prompt,
        "mediaCategory": "MEDIA_CATEGORY_BOARD"
    }
    
    # Hi·ªÉn th·ªã loading spinner
    spinner = LoadingSpinner("ƒêang t·∫°o ·∫£nh v·ªõi AI...", Fore.MAGENTA)
    spinner.start()
    
    try:
        response = browser_sim.make_request("POST", url, headers=headers, json=payload, timeout=60)
        spinner.stop()
        
        if response and response.status_code == 200:
            return response.json()
        else:
            if response:
                log_error(f"L·ªói khi t·∫°o ·∫£nh: {response.status_code}")
                log_error(response.text)
            return None
    except requests.exceptions.Timeout:
        spinner.stop()
        log_error("Timeout khi t·∫°o ·∫£nh - c√≥ th·ªÉ prompt qu√° ph·ª©c t·∫°p")
        return None
    except Exception as e:
        spinner.stop()
        log_error(f"L·ªói khi t·∫°o ·∫£nh: {e}")
        return None

def download_image(image_url, filename):
    """T·∫£i xu·ªëng ·∫£nh"""
    try:
        response = requests.get(image_url)
        if response.status_code == 200:
            with open(filename, 'wb') as f:
                f.write(response.content)
            log_success(f"ƒê√£ t·∫£i xu·ªëng: {filename}")
            return True
    except Exception as e:
        log_error(f"L·ªói khi t·∫£i xu·ªëng ·∫£nh {filename}: {e}")
    return False

def save_base64_image(base64_data, filename, output_folder="./"):
    """L∆∞u ·∫£nh t·ª´ base64 v√†o folder ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh"""
    # T·∫°o ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß
    full_path = os.path.join(output_folder, filename)
    
    # Hi·ªÉn th·ªã loading spinner
    spinner = LoadingSpinner(f"ƒêang l∆∞u ·∫£nh: {filename[:30]}...", Fore.BLUE)
    spinner.start()
    
    try:
        # Lo·∫°i b·ªè prefix data:image/jpeg;base64, n·∫øu c√≥
        if ',' in base64_data:
            base64_data = base64_data.split(',')[1]
        
        image_data = base64.b64decode(base64_data)
        with open(full_path, 'wb') as f:
            f.write(image_data)
        
        spinner.stop()
        log_success(f"ƒê√£ l∆∞u ·∫£nh: {full_path}")
        return True
    except Exception as e:
        spinner.stop()
        log_error(f"L·ªói khi l∆∞u ·∫£nh {full_path}: {e}")
    return False

def upload_image_to_google_labs(cookie, image_path, caption="A hyperrealistic digital illustration depicts a shiny, chrome-like mouse character, standing confidently in a martial arts gi against a subtly rendered, dark background of what appears to be an arena. The character, positioned centrally in the frame, faces forward with a slight tilt of its head to the right. Its body is composed of a highly reflective, polished silver material, giving it a metallic, almost liquid sheen.\n\nThe mouse has large, round ears that match its reflective silver body. Its face is characterized by large, expressive eyes with black pupils surrounded by a thin white iris, and a faint, thin black eyebrow line above each eye. A small, dark triangular nose sits above a tiny, closed mouth. Whiskers, depicted as thin black lines, extend from its cheeks. The overall expression of the mouse is one of determination or seriousness.\n\nIt wears a dark, possibly black or very dark gray, martial arts gi. The gi consists of a wrap-around top with a V-neck opening and wide sleeves, secured at the waist by a tied belt with a knot at the front. The fabric of the gi has visible texture, with distinct lines and shading suggesting folds and creases, giving it a somewhat sketch-like or illustrated appearance in contrast to the smooth, reflective quality of the mouse's skin. The gi extends down to just above its feet. The mouse's feet are clad in simple, low-top white sneakers with dark soles, contrasting with the dark gi.\n\nThe background is dark and desaturated, creating a stark contrast with the shiny character. It suggests the interior of an arena or training dojo, with a circular, slightly elevated platform visible in the foreground where the mouse stands. The background features blurred architectural elements, possibly seating or walls, rendered in shades of dark gray and black. A faint \"SU\" logo, stylized in white, is visible in the upper right corner of the image. The lighting appears to come from the front and slightly above, accentuating the metallic sheen of the mouse and casting subtle shadows."):
    """Upload ·∫£nh l√™n Google Labs API"""
    url = "https://labs.google/fx/api/trpc/backbone.uploadImage"
    
    headers = browser_sim.get_api_headers(cookie=cookie)
    
    # ƒê·ªçc ·∫£nh v√† chuy·ªÉn th√†nh base64
    try:
        with open(image_path, 'rb') as image_file:
            image_data = base64.b64encode(image_file.read()).decode('utf-8')
            # Th√™m prefix data:image/jpeg;base64,
            base64_string = f"data:image/jpeg;base64,{image_data}"
    except Exception as e:
        log_error(f"L·ªói khi ƒë·ªçc file ·∫£nh {image_path}: {e}")
        return None
    
    # T·∫°o UUID cho workflowId v√† sessionId
    workflow_id = str(uuid.uuid4())
    session_id = f";{uuid.uuid4().int}"
    
    payload = {
        "json": {
            "clientContext": {
                "workflowId": workflow_id,
                "sessionId": session_id
            },
            "uploadMediaInput": {
                "mediaCategory": "MEDIA_CATEGORY_SUBJECT",
                "rawBytes": base64_string,
                "caption": caption
            }
        }
    }
    
    # Hi·ªÉn th·ªã loading spinner
    spinner = LoadingSpinner("ƒêang upload ·∫£nh l√™n Google Labs...", Fore.CYAN)
    spinner.start()
    
    try:
        response = browser_sim.make_request("POST", url, headers=headers, json=payload, timeout=60)
        spinner.stop()
        
        if response and response.status_code == 200:
            result = response.json()
            if 'result' in result and 'data' in result['result']:
                upload_data = result['result']['data']['json']['result']
                log_success("Upload ·∫£nh th√†nh c√¥ng!")
                return {
                    'caption': caption,
                    'uploadMediaGenerationId': upload_data['uploadMediaGenerationId'],
                    'workflowId': workflow_id,
                    'sessionId': session_id
                }
        else:
            if response:
                log_error(f"L·ªói khi upload ·∫£nh: {response.status_code}")
                log_error(response.text)
            return None
    except requests.exceptions.Timeout:
        spinner.stop()
        log_error("Timeout khi upload ·∫£nh")
        return None
    except Exception as e:
        spinner.stop()
        log_error(f"L·ªói khi upload ·∫£nh: {e}")
        return None

def generate_image_from_image(access_token, upload_data, user_instruction, seed):
    """T·∫°o ·∫£nh t·ª´ ·∫£nh ƒë√£ upload"""
    url = "https://aisandbox-pa.googleapis.com/v1/whisk:runImageRecipe"
    
    headers = browser_sim.get_api_headers(access_token=access_token)
    
    payload = {
        "clientContext": {
            "workflowId": upload_data['workflowId'],
            "tool": "BACKBONE",
            "sessionId": upload_data['sessionId']
        },
        "seed": seed,
        "imageModelSettings": {
            "imageModel": image_model,
            "aspectRatio": "IMAGE_ASPECT_RATIO_LANDSCAPE"
        },
        "userInstruction": user_instruction,
        "recipeMediaInputs": [
            {
                "caption": upload_data.get('caption', ''),
                "mediaInput": {
                    "mediaCategory": "MEDIA_CATEGORY_SUBJECT",
                    "mediaGenerationId": upload_data['uploadMediaGenerationId']
                }
            }
        ]
    }
    
    
    # Hi·ªÉn th·ªã loading spinner
    spinner = LoadingSpinner("ƒêang t·∫°o ·∫£nh t·ª´ ·∫£nh v·ªõi AI...", Fore.MAGENTA)
    spinner.start()
    
    try:
        response = browser_sim.make_request("POST", url, headers=headers, json=payload, timeout=60)
        spinner.stop()
        
        if response and response.status_code == 200:
            return response.json()
        else:
            if response:
                log_error(f"L·ªói khi t·∫°o ·∫£nh t·ª´ ·∫£nh: {response.status_code}")
                log_error(response.text)
            return None
    except requests.exceptions.Timeout:
        spinner.stop()
        log_error("Timeout khi t·∫°o ·∫£nh t·ª´ ·∫£nh")
        return None
    except Exception as e:
        spinner.stop()
        log_error(f"L·ªói khi t·∫°o ·∫£nh t·ª´ ·∫£nh: {e}")
        return None

def sanitize_filename(stt_value, prompt_text, max_prompt_length=80):
    """T·∫°o t√™n file an to√†n cho Windows: STT_PROMPT.jpg"""
    invalid_chars = '\\/:*?"<>|'
    safe = ''.join(
        (ch if (ch.isalnum() or ch in (' ', '-', '_')) and ch not in invalid_chars else '_')
        for ch in str(prompt_text)
    )
    safe = ' '.join(safe.split())  # chu·∫©n h√≥a kho·∫£ng tr·∫Øng
    safe = safe.strip(' .')  # b·ªè d·∫•u ch·∫•m ho·∫∑c space ·ªü cu·ªëi
    if len(safe) > max_prompt_length:
        safe = safe[:max_prompt_length].rstrip()
    if not safe:
        safe = 'image'
    return f"{stt_value}_{safe}.jpg"


def show_main_menu():
    """Hi·ªÉn th·ªã menu ch√≠nh"""
    print(f"\n{Fore.YELLOW}üé® Ch·ªçn ch·∫ø ƒë·ªô t·∫°o ·∫£nh:{Style.RESET_ALL}")
    print(f"{Fore.CYAN}1.{Style.RESET_ALL} T·∫°o ·∫£nh t·ª´ prompt (Excel)")
    print(f"{Fore.CYAN}2.{Style.RESET_ALL} T·∫°o ·∫£nh t·ª´ Prompt + Image (Image-to-Image)")
    print(f"{Fore.CYAN}3.{Style.RESET_ALL} Tho√°t")
    
    while True:
        choice = input(f"\n{Fore.GREEN}Ch·ªçn ch·∫ø ƒë·ªô (1/2/3): {Style.RESET_ALL}").strip()
        if choice in ['1', '2', '3']:
            return choice
        else:
            print(f"{Fore.RED}L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn 1, 2 ho·∫∑c 3.{Style.RESET_ALL}")

def main():
    # Hi·ªÉn th·ªã ASCII art
    text = r"""
  __        ___     _     _       ____            _    _           
 \ \      / / |__ (_)___| | __  / ___|___   ___ | | _(_) ___  ___ 
  \ \ /\ / /| '_ \| / __| |/ / | |   / _ \ / _ \| |/ / |/ _ \/ __|
   \ V  V / | | | | \__ \   <  | |__| (_) | (_) |   <| |  __/\__ \
    \_/\_/  |_| |_|_|___/_|\_\  \____\___/ \___/|_|\_\_|\___||___/
"""
    print(f"{Fore.YELLOW}{text}{Style.RESET_ALL}")
    
    # K√≠ch ho·∫°t browser simulation
    activate_browser_simulation()
    
    # ƒê·ªçc config
    with open('config.json', 'r', encoding='utf-8') as f:
        config = json.load(f)
    
    seed = config.get('seed', 0)
    global image_model
    image_model = config.get('imageModel', 'IMAGEN_3_5')
    
    # L·∫•y access_token
    log_info("ƒêang l·∫•y access_token...")
    cookie = read_cookie()
    access_data = get_access_token(cookie)
    
    if not access_data or not access_data.get('access_token'):
        log_error("Kh√¥ng th·ªÉ l·∫•y access_token. D·ª´ng ch∆∞∆°ng tr√¨nh.")
        return
    
    user_info = access_data.get('user', {})
    log_success("ƒê√£ l·∫•y access_token th√†nh c√¥ng!")
    log_user_info(user_info.get('name', 'Unknown'), user_info.get('email', 'Unknown'))

    access_token = access_data.get('access_token')
    
    # Hi·ªÉn th·ªã menu ch√≠nh
    while True:
        choice = show_main_menu()
        
        if choice == '1':
            # Ch·∫ø ƒë·ªô t·∫°o ·∫£nh t·ª´ prompt (Excel)
            excel_mode(access_token, seed)
        elif choice == '2':
            # Ch·∫ø ƒë·ªô t·∫°o ·∫£nh t·ª´ Excel + ·∫¢nh
            excel_img2img_mode(access_token, cookie, seed)
        elif choice == '3':
            # Tho√°t
            log_info("C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng ch∆∞∆°ng tr√¨nh!")
            break

def excel_mode(access_token, seed):
    """Ch·∫ø ƒë·ªô t·∫°o ·∫£nh t·ª´ Excel (ch·ªâ prompt)"""
    # B∆∞·ªõc 1: Ch·ªçn folder output
    output_folder = get_output_folder()
    if not create_folder_if_not_exists(output_folder):
        log_error("Kh√¥ng th·ªÉ t·∫°o folder. D·ª´ng ch∆∞∆°ng tr√¨nh.")
        return
    
    # B∆∞·ªõc 2: ƒê·ªçc d·ªØ li·ªáu t·ª´ Excel
    log_info("ƒêang ƒë·ªçc d·ªØ li·ªáu t·ª´ Excel...")
    excel_data = read_excel_data()
    
    if not excel_data:
        log_error("Kh√¥ng c√≥ d·ªØ li·ªáu trong file Excel. D·ª´ng ch∆∞∆°ng tr√¨nh.")
        return
    
    log_success(f"ƒê√£ ƒë·ªçc {len(excel_data)} d√≤ng d·ªØ li·ªáu t·ª´ Excel")
    
    # B∆∞·ªõc 3: T·∫°o ·∫£nh cho t·ª´ng prompt
    log_info(f"B·∫Øt ƒë·∫ßu t·∫°o {len(excel_data)} ·∫£nh...")
    log_info(f"·∫¢nh s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o: {os.path.abspath(output_folder)}")
    
    # T·∫°o progress bar
    with tqdm(total=len(excel_data), desc="T·∫°o ·∫£nh", 
              bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}]",
              colour='green') as pbar:
        
        for stt, prompt in excel_data:
            pbar.set_description(f"T·∫°o ·∫£nh STT {stt}")
            
            # G·ªçi API t·∫°o ·∫£nh
            result = generate_image(access_token, prompt, seed)
            
            if result and 'imagePanels' in result:
                for panel in result['imagePanels']:
                    if 'generatedImages' in panel:
                        for img in panel['generatedImages']:
                            if 'encodedImage' in img:
                                filename = sanitize_filename(stt, prompt)
                                # L∆∞u ·∫£nh t·ª´ base64 v√†o folder ƒë∆∞·ª£c ch·ªçn
                                save_base64_image(img['encodedImage'], filename, output_folder)
            
            # TƒÉng seed cho l·∫ßn ti·∫øp theo
            seed += 1
            pbar.update(1)
    
    log_success("Ho√†n th√†nh t·∫°o ·∫£nh t·ª´ Excel!")

def excel_img2img_mode(access_token, cookie, seed):
    """Ch·∫ø ƒë·ªô t·∫°o ·∫£nh t·ª´ Excel v·ªõi Image-to-Image"""
    # B∆∞·ªõc 1: Ch·ªçn folder output
    output_folder = get_output_folder()
    if not create_folder_if_not_exists(output_folder):
        log_error("Kh√¥ng th·ªÉ t·∫°o folder. D·ª´ng ch∆∞∆°ng tr√¨nh.")
        return
    
    # B∆∞·ªõc 2: ƒê·ªçc d·ªØ li·ªáu t·ª´ Excel
    log_info("ƒêang ƒë·ªçc d·ªØ li·ªáu t·ª´ Excel cho Image-to-Image...")
    excel_data = read_excel_img2img_data()
    
    if not excel_data:
        log_error("Kh√¥ng c√≥ d·ªØ li·ªáu trong file Excel. D·ª´ng ch∆∞∆°ng tr√¨nh.")
        return
    
    log_success(f"ƒê√£ ƒë·ªçc {len(excel_data)} d√≤ng d·ªØ li·ªáu t·ª´ Excel")
    
    # B∆∞·ªõc 3: T·∫°o ·∫£nh cho t·ª´ng d√≤ng
    log_info(f"B·∫Øt ƒë·∫ßu t·∫°o {len(excel_data)} ·∫£nh t·ª´ ·∫£nh...")
    log_info(f"·∫¢nh s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o: {os.path.abspath(output_folder)}")
    
    # T·∫°o progress bar
    with tqdm(total=len(excel_data), desc="T·∫°o ·∫£nh t·ª´ ·∫£nh", 
              bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}]",
              colour='magenta') as pbar:
        
        for stt, prompt, image_path in excel_data:
            pbar.set_description(f"X·ª≠ l√Ω STT {stt}")
            
            # Ki·ªÉm tra file ·∫£nh c√≥ t·ªìn t·∫°i kh√¥ng
            if not os.path.exists(image_path):
                log_error(f"Kh√¥ng t√¨m th·∫•y file ·∫£nh: {image_path}")
                pbar.update(1)
                continue
            
            # Upload ·∫£nh l√™n Google Labs
            log_info(f"ƒêang upload ·∫£nh: {os.path.basename(image_path)}")
            upload_data = upload_image_to_google_labs(cookie, image_path, caption="A hyperrealistic digital illustration depicts a shiny, chrome-like mouse character, standing confidently in a martial arts gi against a subtly rendered, dark background of what appears to be an arena. The character, positioned centrally in the frame, faces forward with a slight tilt of its head to the right. Its body is composed of a highly reflective, polished silver material, giving it a metallic, almost liquid sheen.\n\nThe mouse has large, round ears that match its reflective silver body. Its face is characterized by large, expressive eyes with black pupils surrounded by a thin white iris, and a faint, thin black eyebrow line above each eye. A small, dark triangular nose sits above a tiny, closed mouth. Whiskers, depicted as thin black lines, extend from its cheeks. The overall expression of the mouse is one of determination or seriousness.\n\nIt wears a dark, possibly black or very dark gray, martial arts gi. The gi consists of a wrap-around top with a V-neck opening and wide sleeves, secured at the waist by a tied belt with a knot at the front. The fabric of the gi has visible texture, with distinct lines and shading suggesting folds and creases, giving it a somewhat sketch-like or illustrated appearance in contrast to the smooth, reflective quality of the mouse's skin. The gi extends down to just above its feet. The mouse's feet are clad in simple, low-top white sneakers with dark soles, contrasting with the dark gi.\n\nThe background is dark and desaturated, creating a stark contrast with the shiny character. It suggests the interior of an arena or training dojo, with a circular, slightly elevated platform visible in the foreground where the mouse stands. The background features blurred architectural elements, possibly seating or walls, rendered in shades of dark gray and black. A faint \"SU\" logo, stylized in white, is visible in the upper right corner of the image. The lighting appears to come from the front and slightly above, accentuating the metallic sheen of the mouse and casting subtle shadows.")
            
            if not upload_data:
                log_error(f"Kh√¥ng th·ªÉ upload ·∫£nh: {image_path}")
                pbar.update(1)
                continue
            # print('UPLOAD ·∫¢NH L√äN GOOGLE LABS',upload_data)
            # T·∫°o ·∫£nh t·ª´ ·∫£nh
            result = generate_image_from_image(access_token, upload_data, prompt, seed)
            
            if result and 'imagePanels' in result:
                for panel in result['imagePanels']:
                    if 'generatedImages' in panel:
                        for img in panel['generatedImages']:
                            if 'encodedImage' in img:
                                filename = sanitize_filename(stt, prompt)
                                # L∆∞u ·∫£nh t·ª´ base64 v√†o folder ƒë∆∞·ª£c ch·ªçn
                                save_base64_image(img['encodedImage'], filename, output_folder)
            
            # TƒÉng seed cho l·∫ßn ti·∫øp theo
            seed += 1
            pbar.update(1)
    
    log_success("Ho√†n th√†nh t·∫°o ·∫£nh t·ª´ Excel Image-to-Image!")

if __name__ == "__main__":
    main()
